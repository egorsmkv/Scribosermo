import argparse
import os
import tarfile
import urllib

from audiomate.corpus import io
from progressist import ProgressBar
from vctube import VCtube

# ==================================================================================================


def download_youtube_playlist(output_dir, playlist_url, lang):
    vc = VCtube(output_dir, playlist_url, lang)
    vc.download_audio()
    vc.download_captions(skip_autogenerated=True)
    vc.audio_split(parallel=True)


# ==================================================================================================


def download_and_extract(link, target_path):
    path = os.path.join(target_path, "tmp.tar.gz")
    pbar = ProgressBar(template="Download |{animation}| {done:B}/{total:B}")
    urllib.request.urlretrieve(link, path, reporthook=pbar.on_urlretrieve)

    tf = tarfile.open(path)
    tf.extractall(path=target_path)
    os.remove(path)


# ==================================================================================================


def main():
    parser = argparse.ArgumentParser(description="Prepare data for training.")
    parser.add_argument("--target_path", type=str, required=True)
    parser.add_argument("--language", type=str, required=True)
    parser.add_argument("--common_voice", action="store_true")
    parser.add_argument("--css_ten", action="store_true")
    parser.add_argument("--lingualibre", action="store_true")
    parser.add_argument("--mailabs", action="store_true")
    parser.add_argument("--swc", action="store_true")
    parser.add_argument("--tatoeba", action="store_true")
    parser.add_argument("--tuda", action="store_true")
    parser.add_argument("--voxforge", action="store_true")
    parser.add_argument("--zamia_speech", action="store_true")
    parser.add_argument("--cv_singleword", action="store_true")
    parser.add_argument("--kurzgesagt", action="store_true")
    parser.add_argument("--musstewissen", action="store_true")
    parser.add_argument("--pulsreportage", action="store_true")
    parser.add_argument("--terrax", action="store_true")
    parser.add_argument("--ykollektiv", action="store_true")
    args = parser.parse_args()

    if not os.path.isdir(args.target_path):
        os.makedirs(args.target_path, exist_ok=True)

    if args.common_voice:
        dl = io.CommonVoiceDownloader(lang=args.language)
        print("Downloading common-voice-{} ...".format(args.language))
        dl.download(os.path.join(args.target_path, "common_voice"))

    if args.lingualibre:
        langs = {
            "de": "deu",
            "eo": "epo",
            "es": "spa",
            "fr": "fra",
            "it": "ita",
            "pl": "pol",
        }
        if args.language in langs:
            print("Downloading lingualibre-{} ...".format(args.language))
            dl = io.LinguaLibreDownloader(lang=langs[args.language])
            dl.download(os.path.join(args.target_path, "lingualibre"))
        else:
            msg = "Language '{}' not supported for lingualibre"
            raise ValueError(msg.format(args.language))

    if args.mailabs:
        langs = {
            "de": "de_DE",
            "es": "es_ES",
            "fr": "fr_FR",
            "it": "it_IT",
            "pl": "pl_PL",
            "ru": "ru_RU",
            "uk": "uk_UK",
        }
        if args.language in langs:
            print("Downloading mailabs-{} ...".format(args.language))
            dl = io.MailabsDownloader(lang=langs[args.language])
            dl.download(os.path.join(args.target_path, "mailabs"))
        else:
            msg = "Language '{}' not supported for mailabs"
            raise ValueError(msg.format(args.language))

    if args.swc:
        dl = io.SWCDownloader(lang=args.language)
        print("Downloading swc-{} ...".format(args.language))
        dl.download(os.path.join(args.target_path, "swc"))

    if args.tatoeba:
        langs = {
            "de": "deu",
            "eo": "epo",
            "es": "spa",
            "fr": "fra",
            "it": "ita",
            "pl": "pol",
        }
        if args.language in langs:
            print("Downloading tatoeba-{} ...".format(args.language))
            dl = io.TatoebaDownloader(include_languages=[langs[args.language]])
            dl.download(os.path.join(args.target_path, "tatoeba"))
        else:
            msg = "Language '{}' not supported for tatoeba"
            raise ValueError(msg.format(args.language))

    if args.tuda:
        print("Downloading tuda-de ...")
        dl = io.TudaDownloader()
        dl.download(os.path.join(args.target_path, "tuda"))

    if args.voxforge:
        dl = io.VoxforgeDownloader(lang=args.language)
        print("Downloading voxforge-{} ...".format(args.language))
        dl.download(os.path.join(args.target_path, "voxforge"))

    if args.zamia_speech:
        dl = io.ZamiaSpeechDownloader(lang=args.language)
        print("Downloading zamia-speech-{} ...".format(args.language))
        dl.download(os.path.join(args.target_path, "zamia_speech"))

    if args.cv_singleword:
        print("Downloading cv-singleword ...")
        link = "https://voice-prod-bundler-ee1969a6ce8178826482b88e843c335139bd3fb4.s3.amazonaws.com/cv-corpus-5-singleword/cv-corpus-5-singleword.tar.gz"
        download_and_extract(link, args.target_path)

    if args.kurzgesagt:
        print("Downloading kurzgesagt ...")
        link = (
            "https://www.youtube.com/watch?v=erDUXM8mCS8&list=UUwRH985XgMYXQ6NxXDo8npw"
        )
        path = os.path.join(args.target_path, "kurzgesagt")
        download_youtube_playlist(path, link, "de")

    if args.musstewissen:
        print("Downloading musstewissen-deutsch ...")
        link = (
            "https://www.youtube.com/watch?v=ZnQiXDyHJcY&list=UUzOHLoNwbebvEkn7y6x-EWA"
        )
        path = os.path.join(args.target_path, "musstewissen_deutsch")
        download_youtube_playlist(path, link, "de")

        print("\nDownloading musstewissen-mathe ...")
        link = (
            "https://www.youtube.com/watch?v=ba-uUUaDxSo&list=UUaxX8488TqU6bZdcKpxPVvQ"
        )
        path = os.path.join(args.target_path, "musstewissen_mathe")
        download_youtube_playlist(path, link, "de")

        print("\nDownloading musstewissen-physik ...")
        link = (
            "https://www.youtube.com/watch?v=CSwivAbOhio&list=UU9RSWjfMU3qMixhigyHjEgw"
        )
        path = os.path.join(args.target_path, "musstewissen_physik")
        download_youtube_playlist(path, link, "de")

        print("\nDownloading musstewissen-chemie ...")
        link = (
            "https://www.youtube.com/watch?v=Mp9ss59KoWI&list=UU146qqkUMTrn4nfSSOTNwiA"
        )
        path = os.path.join(args.target_path, "musstewissen_chemie")
        download_youtube_playlist(path, link, "de")

    if args.pulsreportage:
        print("Downloading puls-reportage ...")
        link = (
            "https://www.youtube.com/watch?v=yl9B3KVqwQs&list=UUBzai1GXVKDdVCrwlKZg_6Q"
        )
        path = os.path.join(args.target_path, "pulsreportage")
        download_youtube_playlist(path, link, "de")

    if args.terrax:
        print("Downloading terra-x ...")
        link = (
            "https://www.youtube.com/watch?v=DL4faBZhHuo&list=UUA3mpqm67CpJ13YfA8qAnow"
        )
        path = os.path.join(args.target_path, "terrax")
        download_youtube_playlist(path, link, "de")

    if args.ykollektiv:
        print("Downloading y-kollektiv ...")
        link = (
            "https://www.youtube.com/watch?v=pbIhmqRhvFo&list=UULoWcRy-ZjA-Erh0p_VDLjQ"
        )
        path = os.path.join(args.target_path, "ykollektiv")
        download_youtube_playlist(path, link, "de")


# ==================================================================================================

if __name__ == "__main__":
    main()
    print("FINISHED")
